---
import Button from "./Button.astro"


import { getCollection } from "astro:content";

const experiances = (await getCollection("experiances")).sort(function (first, second) {
  return second.data.publishedAt.getTime() - first.data.publishedAt.getTime();
});

---

<main class="max-w-4xl mx-auto h-full mb-20">

    <div class="z-10 sticky mb-5 top-[100px] border border-neutral-800 p-6 flex items-center justify-between text-white w-full bg-black/40 backdrop-blur-sm rounded-xl">
        <div class="flex items-center">
          <svg width="51" height="51" fill="none" stroke="currentColor" stroke-width="0.5" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
            <path d="M8 7h8M8 7H4a2 2 0 0 0-2 2v10a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2V9a2 2 0 0 0-2-2H8Zm0 0V3.6a.6.6 0 0 1 .6-.6h6.8a.6.6 0 0 1 .6.6V7H8Z"></path>
            </svg>
            <div class="ml-5">
                <h1 class="text-lg font-bold">Experiances</h1>
                <p class="text-neutral-300">My relevant experiances working as a software engineer</p>
            </div>
        </div>

        <div class="">
          <Button label="See More" />
        </div>
    </div>
    <ul>
      {
        experiances.length >0 && experiances.slice(0,4).map(() => (
          <li>
            <article class="border border-neutral-800 rounded-2xl overflow-hidden">
              <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
                <path stroke-linecap="round" stroke-linejoin="round" d="M6.75 7.5l3 2.25-3 2.25m4.5 0h3m-9 8.25h13.5A2.25 2.25 0 0021 18V6a2.25 2.25 0 00-2.25-2.25H5.25A2.25 2.25 0 003 6v12a2.25 2.25 0 002.25 2.25z" />
              </svg>
      
              <h3>Develop.</h3>
              <p>
                Lorem ipsum dolor sit amet consectetur adipisicing elit. Minima alias fuga et ab magnam aliquam commodi ratione vel fugit nesciunt voluptatibus.
              </p>
            </article>
          </li>
        ))
      }
    </ul>
  </main>

<style>

ul {
  display: grid;
  grid-template-columns: repeat(2, 1fr);
  list-style-type: none;
  padding: 0;
  margin: 0;
}

li {
  padding: 1rem;
  list-style-type: none;
}

ul::after {
  border-radius: 1rem;
  content: "";
  position: absolute;
  background: hsl(0 0% 10%);
  pointer-events: none;
  z-index: -2;
  inset:
    calc(var(--top) * 1px)
    calc(100% - (var(--right) * 1px))
    calc(100% - (var(--bottom) * 1px))
    calc(var(--left) * 1px);
  transition: inset 0.2s;
}

ul[data-enhanced]:hover {
  --active: 1;
}
ul[data-enhanced]::after {
  opacity: var(--active, 0);
  transition: opacity 0.2s, inset 0.2s 0.2s;
}
ul[data-enhanced]:hover::after {
  transition: opacity 0.2s 0.2s, inset 0.2s;
}

@supports(anchor-name: --anchor) {
  li:nth-of-type(1) article { anchor-name: --develop; }
  li:nth-of-type(2) article { anchor-name: --preview; }
  li:nth-of-type(3) article { anchor-name: --ship; }
  li:nth-of-type(4) article { anchor-name: --profit; }

  :root { --anchor: --develop; }
  :root:has(li:nth-of-type(1):hover) { --anchor: --develop; }
  :root:has(li:nth-of-type(2):hover) { --anchor: --preview; }
  :root:has(li:nth-of-type(3):hover) { --anchor: --ship; }
  :root:has(li:nth-of-type(4):hover) { --anchor: --profit; }  

  ul::after {
    inset:
      anchor(var(--anchor) top)
      anchor(var(--anchor) right)
      anchor(var(--anchor) bottom)
      anchor(var(--anchor) left);
  }

  ul:has(li:hover) {
    --active: 1;
  }
  ul::after {
    opacity: var(--active, 0);
    transition: opacity 0.2s, inset 0.2s 0.2s;
  }
  ul:hover::after {
    transition: opacity 0.2s 0.2s, inset 0.2s;
  }
  
  article::after {
    content: unset;
    display: none;
  }
}

ul:not([data-enhanced]) article::after {
  content: "";
  position: absolute;
  inset: 0;
  z-index: -2;
  background: hsl(0 0% 10%);
  border-radius: 1rem;
  opacity: var(--li-active, 0);
  transition: opacity 0.2s;
}

article {
  color: hsl(0 0% 80%);
  padding: 1rem;
  display: grid;
  gap: 0.5rem;
  position: relative;
}

article::before {
  content: "";
  position: absolute;
  inset: 0;
  background:
    linear-gradient(var(--bg) 0 2px, transparent 2px 38px) -20px -20px / 40px 40px,
    linear-gradient(90deg, var(--bg) 0 2px, transparent 2px 38px) -20px -20px / 40px 40px;
  mask: linear-gradient(-35deg, var(--bg) 0%, transparent 45%);
  z-index: -1;
  opacity: var(--li-active, 0);
  transition: opacity 0.2s;
}

li:hover {
  --li-active: 1;
}

article h3 {
  margin: 0;
  font-weight: 120;
}

article p {
  margin: 0;
  text-wrap: pretty;
  background: linear-gradient(hsl(0 0% 80%), hsl(0 0% 50%));
  color: transparent;
  background-clip: text;
  font-weight: 80;
}

article svg {
  width: 44px;
}

article svg path {
  stroke-width: 0.75;
  stroke: hsl(var(--hue, 30) calc(var(--li-active, 0) * 60%) 60%);
  transition: stroke 0.2s;
}

li:nth-of-type(1) { --hue: 30; }
li:nth-of-type(2) { --hue: 280; }
li:nth-of-type(3) { --hue: 210; }
li:nth-of-type(4) { --hue: 120; }
  </style>

  <script>
  console.clear()
    if (!CSS.supports('anchor-name: --anchor')) {
      
      /**
      * Run an event listener on the list.
      * Set the bounding properties based on closest element
      */
      const LIST = document.querySelector('ul')
      LIST.dataset.enhanced = true
      let current
      const UPDATE = ({ x, y }) => {
        const ARTICLE = document.elementFromPoint(x, y).closest('li').querySelector('article')
        if (ARTICLE !== current) {
          current = ARTICLE  
          // Set the bounds
          if (current) {
            const BOUNDS = current.getBoundingClientRect()
            console.info({ BOUNDS })
            LIST.style.setProperty('--top', BOUNDS.top)
            LIST.style.setProperty('--right', BOUNDS.right)
            LIST.style.setProperty('--bottom', BOUNDS.bottom)
            LIST.style.setProperty('--left', BOUNDS.left)
            LIST.style.setProperty('--height', BOUNDS.height)
            LIST.style.setProperty('--width', BOUNDS.width)
            console.info({ ARTICLE })
          }
        }
      }
      LIST.addEventListener('pointermove', UPDATE)
    }

  </script>